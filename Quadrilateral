/*=================================================================
Program name - Quadrilaterals
Author - Avery Chiu 
Date - 2018/11/19
Programming Language, version number - Java 9
=================================================================
 */

//****************************************************************************************
//<Class>

//<List Of Identifiers
//****************************************************************************************

public abstract class Quadrilateral {
	private static int numQ = 0;

	Quadrilateral() {
		numQ++;
	}

	public static int getNumQ() {
		return numQ;
	}

	public abstract double findArea();

	public abstract double findPerimeter();

}

class Square extends Quadrilateral {
	private double sideLength;

	public Square() {
		super();
		sideLength = 0;
	}

	public double getSideLength() {
		return sideLength;
	}

	public void setSideLength(double sideLength) {
		this.sideLength = sideLength;
	}

	public double findArea() {
		return sideLength * sideLength;
	}

	public double findPerimeter() {
		return sideLength * 4;
	}

	public String toString() {
		return "sideLength=" + sideLength;
	}// end of class Square
}

class Rectangle extends Square {
	private double width;

	public Rectangle() {
		super();
		width = 0;
	}

	public double getWidth() {
		return width;
	}

	public void setWidth(double width) {
		this.width = width;
	}

	public double findArea() {
		return getSideLength() * width;
	}

	public double findPerimeter() {
		return 2 * (getSideLength() + width);
	}

	public String toString() {
		return "width=" + width;
	}
}// end of class Rectangle

class Parallelogram extends Rectangle {
	private double height;

	public Parallelogram() {
		super();
		height = 0;
	}

	public void setHeight(double height) {
		this.height = height;
	}

	public double getHeight() {
		return height;
	}

	public double findArea() {
		return (getWidth() * height) / 2;
	}

	public double findPerimeter() {
		return 2 * (getSideLength() + getWidth());
	}

	public String toString() {
		return "height=" + height;
	}
}// end of class Parallelogram

class Trapezoid extends Parallelogram {
	private double topBase;

	public Trapezoid() {
		super();
		topBase = 0;
	}

	public void setTopBase(double topBase) {
		this.topBase = topBase;
	}

	public double getOtherSide() {
		return topBase;
	}

	public double findArea() {
		return ((topBase + getWidth()) * getHeight()) / 2;
	}

	public double findPerimeter() {// This works for isoceles
		return 2 * getSideLength() + getWidth() + topBase;
	}

	public String toString() {
		return "topBase=" + topBase;
	}
}// end of class Trapezoid

class Rhombus extends Square {
	private double diagonal1;
	private double diagonal2;

	public Rhombus() {
		super();
		diagonal1 = 0;
		diagonal2 = 0;
	}

	public void setDiagonal1(double diagonal1) {
		this.diagonal1 = diagonal1;
	}

	public double getDiagonal1() {
		return diagonal1;
	}

	public void setDiagonal2(double diagonal2) {
		this.diagonal2 = diagonal2;
	}

	public double getDiagonal2() {
		return diagonal2;
	}

	public double findArea() {
		return (diagonal1 * diagonal2) / 2;
	}

	public double findPerimeter() {
		return getSideLength() * 4;
	}

	public String toString() {
		return "diagonal1=" + diagonal1 + " diagonal2=" + diagonal2;
	}
}// End of class Rhombus

class Kite extends Rhombus {
	private double otherSide;

	public Kite() {
		super();
		otherSide = 0;
	}

	public void setOtherSide(double otherSide) {
		this.otherSide = otherSide;
	}

	public double getOtherSide() {
		return otherSide;
	}

	public double findArea() {
		return (getDiagonal1() * getDiagonal2()) / 2;
	}

	public double findPerimeter() {
		return 2 * (otherSide + getSideLength());
	}

	public String toString() {
		return "otherSide=" + otherSide + "area=" + findArea() + "perimeter=" + findPerimeter();
	}

}// End of class Rhombus





/*=================================================================
Program name - Quadrilaterals
Author - Avery Chiu 
Date - 2018/11/19
Programming Language, version number - Java 9
=================================================================
 */
import java.io.*;
import java.util.*;

public class Use {
	public static void main(String[] args) throws IOException {
		ArrayList<Object> list = new ArrayList<Object>();
		int count = 0;

		menu();
		while (count <= 20 && check()) {
			count++;
			creation(input1(), input2(), count, list);
		}
		
	}

	/**
	 * menu method: This procedural method outputs the menu which provides details
	 * for the user regarding the program.
	 * 
	 * @param None
	 * @throws None
	 * @return void
	 */
	static void menu() {
		System.out.println("                WELCOME TO THE QUADRILATERAL CREATOR");
		System.out.println("This program creates and stores a list of 20 quadrilaterals");
	}// End of menu method

	static boolean check() throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		System.out.println("Would you like to create a (or keep making more) shape(s)?");
		System.out.println("Type a number to respond");
		System.out.println("\t1.Yes");
		System.out.println("\t2.No");
		return Integer.parseInt(br.readLine()) == 1;
	}

	static boolean input1() throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		System.out.println("Would you like to create a default or custom shape?");
		System.out.println("\t1.Default");
		System.out.println("\t2.Custom");
		return Integer.parseInt(br.readLine()) == 1;
	}

	static int input2() throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		System.out.println("Please enter an option");
		System.out.println("\t1.Square");
		System.out.println("\t2.Rectangle");
		System.out.println("\t3.Parallelogram");
		System.out.println("\t4.Trapezoid");
		System.out.println("\t5.Rhombus");
		System.out.println("\t6.Kite");
		return Integer.parseInt(br.readLine());

	}

	static void creation(boolean choice1, int choice2, int count, ArrayList<Object> list) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		if (choice1) {
			switch (choice2) {
			case 1:
				Square sq = new Square();
				list.add(sq);
				break;
			case 2:
				Rectangle rec = new Rectangle();
				list.add(rec);
				break;
			case 3:
				Parallelogram par = new Parallelogram();
				list.add(par);
				break;
			case 4:
				Trapezoid trap = new Trapezoid();
				list.add(trap);
				break;
			case 5:
				Rhombus rhom = new Rhombus();
				list.add(rhom);
				break;
			case 6:
				Kite kit = new Kite();
				list.add(kit);
				break;
			default:
				System.out.println("Please re-enter a proper option");
				count--;
			}
		} // End of default shape
		else {
			switch (choice2) {
			case 1:
				Square sq = new Square();
				System.out.println("Please enter a side length");
				sq.setSideLength(Double.parseDouble(br.readLine()));
				list.add(sq);
				break;
			case 2:
				Rectangle rec = new Rectangle();
				System.out.println("Please enter a side length");
				rec.setSideLength(Double.parseDouble(br.readLine()));
				System.out.println("Please enter a width");
				rec.setWidth(Double.parseDouble(br.readLine()));
				list.add(rec);
				break;
			case 3:
				Parallelogram par = new Parallelogram();
				System.out.println("Please enter a side length");
				par.setSideLength(Double.parseDouble(br.readLine()));
				System.out.println("Please enter a width");
				par.setWidth(Double.parseDouble(br.readLine()));
				System.out.println("Please enter a height");
				par.setHeight(Double.parseDouble(br.readLine()));
				list.add(par);
				break;
			case 4:
				Trapezoid trap = new Trapezoid();
				System.out.println("Please enter a side length");
				trap.setSideLength(Double.parseDouble(br.readLine()));
				System.out.println("Please enter a width (bottom base)");
				trap.setWidth(Double.parseDouble(br.readLine()));
				System.out.println("Please enter a height");
				trap.setHeight(Double.parseDouble(br.readLine()));
				System.out.println("Please enter a the top base");
				trap.setTopBase(Double.parseDouble(br.readLine()));
				list.add(trap);
				break;
			case 5:
				Rhombus rhom = new Rhombus();
				System.out.println("Please enter a side length");
				rhom.setSideLength(Double.parseDouble(br.readLine()));
				System.out.println("Please enter a diagonal length 1");
				rhom.setDiagonal1(Double.parseDouble(br.readLine()));
				System.out.println("Please enter a diagonal length 2");
				rhom.setDiagonal2(Double.parseDouble(br.readLine()));
				list.add(rhom);
				break;
			case 6:
				Kite kit = new Kite();
				System.out.println("Please enter the side length of the first adjacent sides");
				kit.setSideLength(Double.parseDouble(br.readLine()));
				System.out.println("Please enter the length of the other adjacent side");
				kit.setOtherSide(Double.parseDouble(br.readLine()));
				System.out.println("Please enter a diagonal length 1");
				kit.setDiagonal1(Double.parseDouble(br.readLine()));
				System.out.println("Please enter a diagonal length 2");
				kit.setDiagonal2(Double.parseDouble(br.readLine()));
				list.add(kit);
				break;
			default:
				System.out.println("Please re-enter a proper option");
				count--;
			}
		} // End of custom shape

	}

}// End of Use class


