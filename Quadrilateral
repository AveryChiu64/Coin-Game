
/*=================================================================
Program name - Quadrilaterals
Author - Avery Chiu 
Date - 2018/11/19
Programming Language, version number - Java 9
=================================================================
 */

//****************************************************************************************
//<Class> 

//<List Of Identifiers

//****************************************************************************************

public abstract class Quadrilateral {
	private static int numQ = 0;

	Quadrilateral() {
		numQ++;
	}

	public static int getNumQ() {
		return numQ;
	}

	public abstract String getKey();

	public abstract double findArea();

	public abstract double findPerimeter();

}// End of Quadrilateral class

class Square extends Quadrilateral {
	private double sideLength;
	private static int numSquareCount = 0;
	private String key;

	public Square() {
		super();
		sideLength = 1;
		if (getClass().equals(Square.class)) {
			numSquareCount++;
			key = "Sq" + numSquareCount;
		}
	}

	public Square(int sideLength) {
		super();
		this.sideLength = sideLength;
		if (getClass().equals(Square.class))
			numSquareCount++;
		key = "Sq" + numSquareCount;
	}

	public String getKey() {
		return key;
	}

	public double getSideLength() {
		return sideLength;
	}

	public void setSideLength(double sideLength) {
		this.sideLength = sideLength;
	}

	public int getNumSquareCount() {
		return numSquareCount;
	}

	public double findArea() {
		return sideLength * sideLength;
	}

	public double findPerimeter() {
		return sideLength * 4;
	}

	@Override
	public String toString() {
		return "Square sideLength=" + sideLength + " units, Perimeter=" + findPerimeter() + " units, Area=" + findArea()
				+ " units^2";
	}

	@Override
	public boolean equals(Object o) {
		if (o instanceof Square) {
			Square c = (Square) o;
			if (this.sideLength == c.sideLength)
				return true;
		}
		return false;

	}

}// End of Square class

class Rectangle extends Square {
	private double width;
	private static int numRectangleCount = 0;

	public Rectangle() {
		super();
		width = 1;
		if (getClass().equals(Rectangle.class))
			numRectangleCount++;
	}

	public Rectangle(int sideLength, int width) {
		super(sideLength);
		this.width = width;
		if (getClass().equals(Rectangle.class))
			numRectangleCount++;
	}

	public double getWidth() {
		return width;
	}

	public void setWidth(double width) {
		this.width = width;
	}

	public int getNumRectangleCount() {
		return numRectangleCount;
	}

	public double findArea() {
		return getSideLength() * width;
	}

	public double findPerimeter() {
		return 2 * (getSideLength() + width);
	}

	@Override
	public String toString() {
		return "Rectangle sidelength=" + getSideLength() + " units, width=" + width + " units, Perimeter="
				+ findPerimeter() + " units Area=" + findArea() + " units^2";
	}

	@Override
	public boolean equals(Object o) {
		if (o instanceof Rectangle) {
			Rectangle c = (Rectangle) o;
			if (getSideLength() == c.getSideLength() && this.width == c.width)
				return true;
		}
		return false;

	}
}// End of Rectangle class

class Parallelogram extends Rectangle {
	private double height;
	private static int numParallelogramCount = 0;

	public Parallelogram() {
		super();
		height = 1;
		if (getClass().equals(Parallelogram.class))
			numParallelogramCount++;
	}

	public Parallelogram(int sideLength, int width, int height) {
		super(sideLength, width);
		this.height = height;
		if (getClass().equals(Parallelogram.class))
			numParallelogramCount++;
	}

	public void setHeight(double height) {
		this.height = height;
	}

	public double getHeight() {
		return height;
	}

	public int getNumParallelogramCount() {
		return numParallelogramCount;
	}

	public double findArea() {
		return (getWidth() * height) / 2;
	}

	public double findPerimeter() {
		return 2 * (getSideLength() + getWidth());
	}

	@Override
	public String toString() {
		return "Parallelogram sidelength= " + getSideLength() + " units, width=" + getWidth() + " units,  height="
				+ height + " units, Perimeter=" + findPerimeter() + " units, Area=" + findArea() + " units^2";
	}

	@Override
	public boolean equals(Object o) {
		if (o instanceof Parallelogram) {
			Parallelogram c = (Parallelogram) o;
			if (getSideLength() == c.getSideLength() && getWidth() == c.getWidth() && this.height == c.height)
				return true;
		}
		return false;

	}
}// End of Parallelogram class

class Trapezoid extends Parallelogram {
	private double topBase;
	private static int numTrapezoidCount = 0;

	public Trapezoid() {
		super();
		topBase = 1;
		if (getClass().equals(Trapezoid.class))
			numTrapezoidCount++;
	}

	public Trapezoid(int sideLength, int width, int height, int topBase) {
		super(sideLength, width, height);
		this.topBase = topBase;
		if (getClass().equals(Trapezoid.class))
			numTrapezoidCount++;
	}

	public void setTopBase(double topBase) {
		this.topBase = topBase;
	}

	public double getOtherSide() {
		return topBase;
	}

	public int getNumTrapezoidCount() {
		return numTrapezoidCount;
	}

	public double findArea() {
		return ((topBase + getWidth()) * getHeight()) / 2;
	}

	public double findPerimeter() {// This works for isoceles
		return 2 * getSideLength() + getWidth() + topBase;
	}

	@Override
	public String toString() {
		return "Trapezoid sidelength=" + getSideLength() + " units ,width=" + getWidth() + " units ,height="
				+ getHeight() + " units ,topBase=" + topBase + " units, Perimeter=" + findPerimeter() + "units, Area="
				+ findArea() + " units^2";
	}

	@Override
	public boolean equals(Object o) {
		if (o instanceof Trapezoid) {
			Trapezoid c = (Trapezoid) o;
			if (getSideLength() == c.getSideLength() && getWidth() == c.getWidth() && getHeight() == c.getHeight()
					&& this.topBase == c.topBase)
				return true;
		}
		return false;

	}
}// end of Trapezoid class

class Rhombus extends Square {
	private double diagonal1;
	private double diagonal2;
	private static int numRhombusCount = 0;

	public Rhombus() {
		super();
		diagonal1 = 1;
		diagonal2 = 1;
		if (getClass().equals(Rhombus.class))
			numRhombusCount++;
	}

	public Rhombus(int sideLength, int diagonal1, int diagonal2) {
		super(sideLength);
		this.diagonal1 = diagonal1;
		this.diagonal2 = diagonal2;
		if (getClass().equals(Rhombus.class))
			numRhombusCount++;
	}

	public void setDiagonal1(double diagonal1) {
		this.diagonal1 = diagonal1;
	}

	public double getDiagonal1() {
		return diagonal1;
	}

	public void setDiagonal2(double diagonal2) {
		this.diagonal2 = diagonal2;
	}

	public double getDiagonal2() {
		return diagonal2;
	}

	public int getNumRhombusCount() {
		return numRhombusCount;
	}

	public double findArea() {
		return (diagonal1 * diagonal2) / 2;
	}

	public double findPerimeter() {
		return getSideLength() * 4;
	}

	@Override
	public String toString() {
		return "Rhombus sideLength=" + getSideLength() + " units ,diagonal1=" + diagonal1 + " units ,diagonal2="
				+ diagonal2 + "units, Perimeter=" + findPerimeter() + "units, Area=" + findArea() + " units^2";
	}

	@Override
	public boolean equals(Object o) {
		if (o instanceof Rhombus) {
			Rhombus c = (Rhombus) o;
			if (getSideLength() == c.getSideLength() && this.diagonal1 == c.diagonal1 && this.diagonal2 == c.diagonal2)
				return true;
		}
		return false;

	}
}// End of Rhombus class

class Kite extends Rhombus {
	private double otherSide;
	private static int numKiteCount = 0;

	public Kite() {
		super();
		otherSide = 1;
		if (getClass().equals(Kite.class))
			numKiteCount++;
	}

	public Kite(int sideLength, int diagonal1, int diagonal2, int otherSide) {
		super(sideLength, diagonal1, diagonal2);
		this.otherSide = otherSide;
		if (getClass().equals(Kite.class))
			numKiteCount++;
	}

	public void setOtherSide(double otherSide) {
		this.otherSide = otherSide;
	}

	public double getOtherSide() {
		return otherSide;
	}

	public int getNumKiteCount() {
		return numKiteCount;
	}

	public double findArea() {
		return (getDiagonal1() * getDiagonal2()) / 2;
	}

	public double findPerimeter() {
		return 2 * (otherSide + getSideLength());
	}

	@Override
	public String toString() {
		return "Kite sideLength=" + getSideLength() + " units ,diagonal1=" + getDiagonal1() + " units ,diagonal2="
				+ getDiagonal2() + " units ,other adjacent side=" + otherSide + " units Perimeter=" + findPerimeter()
				+ " units Area=" + findArea() + "units^2";
	}

	@Override
	public boolean equals(Object o) {
		if (o instanceof Kite) {
			Kite c = (Kite) o;
			if (getSideLength() == c.getSideLength() && getDiagonal1() == c.getDiagonal1()
					&& getDiagonal2() == c.getDiagonal2() && this.otherSide == c.otherSide)
				return true;
		}
		return false;

	}

}// End of Kite class
