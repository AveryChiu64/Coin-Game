
/*=================================================================
Program name - Quadrilaterals
Author - Avery Chiu 
Date - 2018/11/19
Programming Language, version number - Java 9
=================================================================
 */
import java.io.*;
import java.util.*;

public class Use {
	public static void main(String[] args) throws IOException {
		// System objects
		ArrayList<Quadrilateral> list = new ArrayList<Quadrilateral>();

		// Method Calls
		menu();
		while (Quadrilateral.getNumQ() <= 20 && check()) {

			creation(input1(), input2(), list);
		}
		menuForData(list);

	}

	/**
	 * menu method: This procedural method outputs the menu which provides details
	 * for the user regarding the program.
	 * 
	 * @param None
	 * @throws None
	 * @return void
	 */
	static void menu() {
		System.out.println("=============================================================");
		System.out.println("                WELCOME TO THE QUADRILATERAL CREATOR");
		System.out.println("This program creates and stores a list of 20 quadrilaterals");
		System.out.println("You may create up to 20 quadrilaterals");
		System.out.println("=============================================================");

	}// End of menu method

	static boolean check() throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		System.out.println("=============================================================");
		System.out.println("Would you like to create a (or keep making more) shape(s)?");
		System.out.println("Once you choose to stop creating shapes");
		System.out.println("You will be able to search through your database for shapes");
		System.out.println("Type a number to respond");
		System.out.println("\t1.Yes");
		System.out.println("\t2.No");
		System.out.println("=============================================================");
		return Integer.parseInt(br.readLine()) == 1;
	}// End of check method

	static boolean input1() throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		System.out.println("=============================================================");
		System.out.println("Would you like to create a default or custom shape?");
		System.out.println("Default shapes will automatically have units of 1 for each property");
		System.out.println("Custom shapes allow you to choose the properties (eg side length, height etc)");
		System.out.println("\t1.Default");
		System.out.println("\t2.Custom");
		System.out.println("=============================================================");
		return Integer.parseInt(br.readLine()) == 1;
	}// End of input1 method

	static int input2() throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		System.out.println("=============================================================");
		System.out.println("Please enter an option");
		System.out.println("\t1.Square");
		System.out.println("\t2.Rectangle");
		System.out.println("\t3.Parallelogram");
		System.out.println("\t4.Trapezoid");
		System.out.println("\t5.Rhombus");
		System.out.println("\t6.Kite");
		System.out.println("=============================================================");
		return Integer.parseInt(br.readLine());

	}// End of input2 method

	static void creation(boolean choice1, int choice2, ArrayList<Quadrilateral> list) throws IOException {
		// System objects
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));

		// Local Variables
		double sideLength, width, height, topBase, diagonal1, diagonal2, otherAdjacentSide;

		if (choice1) {
			switch (choice2) {
			case 1:
				System.out.println("The side length of the square will be 1 unit");
				if (confirmShape()) {
					Square sq = new Square();
					list.add(sq);
					System.out.println("The shape you just created will be stored as " + sq.getKey());
				}
				break;
			case 2:
				System.out.println("The side length of the rectangle will be 1 unit");
				System.out.println("The width of the rectangle will be 1 unit");
				if (confirmShape()) {
					Rectangle rec = new Rectangle();
					list.add(rec);
					System.out.println("The shape you just created will be stored as" + rec.getKey());
				}
				break;
			case 3:
				System.out.println("The side length of the parallelogram will be 1 unit");
				System.out.println("The width of the parallelogram will be 1 unit");
				System.out.println("The height of the parallelogram will be 1 unit");
				if (confirmShape()) {
					Parallelogram par = new Parallelogram();
					list.add(par);
					System.out.println("The shape you just created will be stored as" + par.getKey());
				}
				break;
			case 4:
				System.out.println("The side length of the trapezoid will be 1 unit");
				System.out.println("The width of the trapezoid will be 1 unit");
				System.out.println("The height of the trapezoid will be 1 unit");
				System.out.println("The top base of the trapezoid will be 1 unit");
				if (confirmShape()) {
					Trapezoid trap = new Trapezoid();
					list.add(trap);
					System.out.println("The shape you just created will be stored as" + trap.getKey());
				}
				break;
			case 5:
				System.out.println("The side length of the rhombus will be 1 unit");
				System.out.println("Diagonal 1 of the rhombus will be 1 unit");
				System.out.println("Diagonal 2 of the rhombus will be 1 unit");
				if (confirmShape()) {
					Rhombus rhom = new Rhombus();
					list.add(rhom);
					System.out.println("The shape you just created will be stored as" + rhom.getKey());
				}
				break;
			case 6:
				System.out.println("The first adjacent side length of the rhombus will be 1 unit");
				System.out.println("The second adjacent side length of the rhombus will be 1 unit");
				System.out.println("Diagonal 1 of the rhombus will be 1 unit");
				System.out.println("Diagonal 2 of the rhombus will be 1 unit");
				if (confirmShape()) {
					Kite kite = new Kite();
					list.add(kite);
					System.out.println("The shape you just created will be stored as" + kite.getKey());
				}
				break;
			default:
				System.out.println("Please re-enter a proper option");
			}// End of switch case
		} // End of default shape
		else {
			switch (choice2) {
			case 1:
				System.out.println("Please enter a side length");
				sideLength = Double.parseDouble(br.readLine());
				System.out.println("The side length of the square will be " + sideLength + " unit(s)");
				if (confirmShape()) {
					Square sq = new Square(sideLength);
					list.add(sq);
					System.out.println("The shape you just created will be stored as" + sq.getKey());
				}
				break;
			case 2:
				System.out.println("Please enter a side length");
				sideLength = Double.parseDouble(br.readLine());
				System.out.println("Please enter a width");
				width = Double.parseDouble(br.readLine());
				System.out.println("The side length of the rectangle will be " + sideLength + " unit(s)");
				System.out.println("The width of the rectangle will be " + width + " unit(s)");
				if (confirmShape()) {
					Rectangle rec = new Rectangle(sideLength, width);
					list.add(rec);
					System.out.println("The shape you just created will be stored as" + rec.getKey());
				}
				break;
			case 3:
				System.out.println("Please enter a side length");
				sideLength = Double.parseDouble(br.readLine());
				System.out.println("Please enter a width");
				width = Double.parseDouble(br.readLine());
				System.out.println("Please enter a height");
				height = Double.parseDouble(br.readLine());
				System.out.println("The side length of the parallelogram will be " + sideLength + " unit(s)");
				System.out.println("The width of the parallelogram will be " + width + " unit(s)");
				System.out.println("The height of the parallelogram will be " + height + " unit(s)");
				if (confirmShape()) {
					Parallelogram par = new Parallelogram();
					list.add(par);
					System.out.println("The shape you just created will be stored as" + par.getKey());
				}
				break;
			case 4:

				System.out.println("Please enter a side length");
				sideLength = Double.parseDouble(br.readLine());
				System.out.println("Please enter a width");
				width = Double.parseDouble(br.readLine());
				System.out.println("Please enter a height");
				height = Double.parseDouble(br.readLine());
				System.out.println("Please enter a the top base");
				topBase = Double.parseDouble(br.readLine());
				System.out.println("The side length of the trapezoid will be " + sideLength + " unit(s)");
				System.out.println("The width of the trapezoid will be " + width + " unit(s)");
				System.out.println("The height of the trapezoid will be " + height + " unit(s)");
				System.out.println("The top base of the trapezoid will be " + topBase + " unit(s)");
				if (confirmShape()) {
					Trapezoid trap = new Trapezoid();
					list.add(trap);
					System.out.println("The shape you just created will be stored as" + trap.getKey());
				}
				break;
			case 5:

				System.out.println("Please enter a side length");
				sideLength = Double.parseDouble(br.readLine());
				System.out.println("Please enter a diagonal length 1");
				diagonal1 = Double.parseDouble(br.readLine());
				System.out.println("Please enter a diagonal length 2");
				diagonal2 = Double.parseDouble(br.readLine());
				System.out.println("The side length of the rhombus will be " + sideLength + " unit(s)");
				System.out.println("The 1st diagonal of the rhombus will be " + diagonal1 + " unit(s)");
				System.out.println("The 2nd diagonal of the rhombus will be " + diagonal2 + " unit(s)");
				if (confirmShape()) {
					Rhombus rhom = new Rhombus();
					list.add(rhom);
					System.out.println("The shape you just created will be stored as" + rhom.getKey());
				}
				break;
			case 6:

				System.out.println("Please enter the first adjacent side length");
				sideLength = Double.parseDouble(br.readLine());
				System.out.println("Please enter the length of the other adjacent side");
				otherAdjacentSide = Double.parseDouble(br.readLine());
				System.out.println("Please enter a diagonal length 1");
				diagonal1 = Double.parseDouble(br.readLine());
				System.out.println("Please enter a diagonal length 2");
				diagonal2 = Double.parseDouble(br.readLine());
				System.out.println("The first adjacent side length of the kite will be " + sideLength + " unit(s)");
				System.out.println("The other adjacent side of the kite will be " + otherAdjacentSide + " unit(s)");
				System.out.println("The 1st diagonal of the kite will be " + diagonal1 + " unit(s)");
				System.out.println("The 2nd diagonal of the kite will be " + diagonal2 + " unit(s)");

				if (confirmShape()) {
					Kite kite = new Kite();
					list.add(kite);
					System.out.println("The shape you just created will be stored as" + kite.getKey());
				}
				break;
			default:
				System.out.println("Please re-enter a proper option");
			}// End of switch case
		} // End of custom shape

	}// End of creation method

	static boolean confirmShape() throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		System.out.println("Are you sure you want this shape");
		System.out.println("\t1.Yes");
		System.out.println("\t2.No,let me choose again");
		return Integer.parseInt(br.readLine()) == 1;
	}

	static void menuForData(ArrayList<Quadrilateral> list) throws IOException {
		int choice = 0;
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		System.out.println("You have succesfully created your quadrilaterals");

		while (choice != 4) {
			System.out.println("=============================================================");
			System.out.println("Please choose an option");
			System.out.println("\t1.Show a list of all the quadrilaterals created");
			System.out.println("\t2.Find a specific quadrilateral based off of its key (number assigned)");
			System.out.println("\t3.Show the number of objects created and the number of each object created");
			System.out.println("\t4.End the program");
			System.out.println("=============================================================");
			choice = Integer.parseInt(br.readLine());
			if (choice == 1)
				outputList(list);
			else if (choice == 2)
				outputQuad(list);
			else if (choice == 3)
				numberOfQuads(list);

		}
	}// End of menu or data

	static void outputList(ArrayList<Quadrilateral> list) {
		// System objects
		Iterator<Quadrilateral> it = list.iterator();

		// Variables
		int count = 1;

		System.out.println("		QUADRILATERALS");
		System.out.println("=============================================================");
		while (it.hasNext()) {
			System.out.println("Quadrilateral " + count);
			System.out.println(it.next());
			count++;
		} // End of while loop
		System.out.println("=============================================================");
	}// End of outputList method

	static void outputQuad(ArrayList<Quadrilateral> list) throws IOException {
		// System objects
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		Iterator<Quadrilateral> it = list.iterator();
		
		//Local Variables
		String userInput=null;
		
		System.out.println("=============================================================");
		System.out.println("Please enter the key of the object you want to find");
		System.out.println("Please enter the first three letters of the shape");
		System.out.println("and the number beside it");
		System.out.println("Eg the key for the 1st Square you made would be squ1");
		System.out.println("=============================================================");
		while (it.hasNext()) {
			if(userInput.equals(((it.next()).getKey())))
				System.out.println(it.next());
					
		}
		System.out.println("=============================================================");
	}// End of outputQuad method

	static void numberOfQuads(ArrayList<Quadrilateral> list) {
		// System objects
		System.out.println("=============================================================");
		System.out.println("There are a total of " + Quadrilateral.getNumQ() + " quadrilaterals");
		System.out.println("There are a total of " + Square.getNumSquareCount() + " square(s)");
		System.out.println("There are a total of " + Rectangle.getNumRectangleCount() + " rectangle(s)");
		System.out.println("There are a total of " + Parallelogram.getNumParallelogramCount() + " parallelogram(s)");
		System.out.println("There are a total of " + Trapezoid.getNumTrapezoidCount() + " trapezoid(s)");
		System.out.println("There are a total of " + Rhombus.getNumRhombusCount() + " rhombus(')");
		System.out.println("There are a total of " + Kite.getNumKiteCount() + " kite(s)");

	}// End of numberOfQuads method
}// End of Use class
